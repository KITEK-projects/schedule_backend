import os
from aiogram import Router
from aiogram.types import Message, ContentType, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import F

import aiohttp


from .parser import html_parse 
from .keyboards import action_selection, start_keyboard, cancel_keyboard

router = Router()

API = "http://schedule-api:8000/v1/"

document = None
file_id = ""

class fsm(StatesGroup):
    add_schedule = State()
    del_schedule = State()


async def check_admin(user_id: int) -> bool:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API}users/{user_id}/", headers={
            'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN')
            }) as response:
            return response.status == 200

async def check_super_admin(user_id: int) -> bool:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API}users/{user_id}/", headers={
            'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN')
            }) as response:
            if response.status == 200:
                data = await response.json()
                return data.get('is_super_admin', False)
            return False


@router.message(F.content_type == ContentType.DOCUMENT)
async def add_schedule_file(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    global document, file_id
    
    document = message.document
    file_id = document.file_id

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_selection().as_markup())

@router.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data.in_(["del", "add"]))
async def edit_schedule(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await callback.message.bot.get_file(file_id)

    destination_file = './schedule.html'
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await callback.message.bot.download_file(file_info.file_path, destination_file)

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π windows-1251
    with open(destination_file, encoding='windows-1251') as file:
        src = file.read()

    try:    
        current_state = callback.data
        print(current_state)
        user_id = callback.from_user.id
        user_name = callback.from_user.full_name

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
            async with session.get(API + "users/", headers={
                'Content-Type': 'application/json',
                'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN'),
            }) as response:
                if response.status == 200:
                    admins = await response.json()
                    super_admins = [admin['user_id'] for admin in admins if admin.get('is_super_admin')]

            payload = html_parse(src)
            action_type = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if current_state == "add" else "—É–¥–∞–ª–µ–Ω–æ"
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if current_state == "add":
                endpoint = "edit/"
                method = session.put
            else:
                endpoint = "edit/"
                method = session.delete

            async with method(API + endpoint, json=payload,
                headers={
                    'Content-Type': 'application/json',
                    'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN'),
                }
            ) as response:
                if response.status == 200:
                    await callback.message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {action_type} —É—Å–ø–µ—à–Ω–æ")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º, –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                    notification_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) {action_type} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    for admin_id in super_admins:
                        if str(admin_id) != str(user_id):  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
                            try:
                                await callback.message.bot.send_message(admin_id, notification_text)
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                await callback.message.bot.send_document(
                                    admin_id, 
                                    document=file_id
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                else: 
                    error_text = await response.text()
                    await callback.message.answer(f"[ –û—à–∏–±–∫–∞ ] {response.status}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")

    except Exception as e:
        if "Cannot connect to host" in str(e):
            await callback.message.answer("[ –û—à–∏–±–∫–∞ ] –ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        else:
            await callback.message.answer(f"[ERROR] {e}")  

@router.message(Command('start'))
async def start_command(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
        reply_markup=start_keyboard().as_markup()
    )

@router.message(Command('help'))
async def help_command(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
    is_super_admin = await check_super_admin(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    is_admin = await check_admin(user_id)
    
    if is_super_admin:
        help_text = (
            "üåü –ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª\n"
            "/adda - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/dela - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞ÔøΩÔøΩ–æ—Ä–∞\n"
            "/lsta - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )
    elif is_admin:
        help_text = (
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª"
        )
    else:
        help_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
    
    await message.answer(help_text, reply_markup=start_keyboard().as_markup())

@router.message(Command('adda'))
async def add_admin(message: Message):
    if not await check_super_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adda <user_id> <name> <is_super>")
            return
            
        target_user_id = int(args[1])
        name = args[2]
        is_super = True if args[3] == "1" else False

        async with aiohttp.ClientSession() as session:
            async with session.post(API + "users/", 
                json={"user_id": target_user_id, "is_admin": True, 'name': name, 'is_super_admin': is_super},
                headers={
                        'Content-Type': 'application/json',
                        'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN'),
                        }
            ) as response:
                if response.status == 201:
                    await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    error_text = await response.text()
                    await message.answer(f"[ –û—à–∏–±–∫–∞ ] {response.status}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
    except ValueError:
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"[ERROR] {e}")

@router.message(Command('dela'))
async def delete_admin(message: Message):
    if not await check_super_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dela <user_id>")
            return
            
        target_user_id = int(args[1])
        
        async with aiohttp.ClientSession() as session:
            async with session.delete(API + f"users/{target_user_id}/", 
                headers={
                        'Content-Type': 'application/json',
                        'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN'),
                        }
            ) as response:
                if response.status == 204:
                    await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    error_text = await response.text()
                    await message.answer(f"[ –û—à–∏–±–∫–∞ ] {response.status}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
    except ValueError:
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"[ERROR] {e}")

@router.message(Command('lsta'))
async def list_admins(message: Message):
    if not await check_super_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API + "users/", headers={
                        'Content-Type': 'application/json',
                        'X-Internal-Token': os.getenv('INTERNAL_API_TOKEN'),
                        }
            ) as response:
                if response.status == 200:
                    admins = await response.json()
                    if not admins:
                        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
                        return
                        
                    admin_list = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                    for admin in admins:
                        admin_info = f"‚Ä¢ <code>{admin.get('user_id', '–ù/–î')}</code>"
                        if 'name' in admin:
                            admin_info += f" - {admin['name']}"
                        if 'is_super_admin' in admin:
                            role = "–°—É–ø–µ—Ä –∞–¥–º–∏–Ω" if admin['is_super_admin'] else "–ê–¥–º–∏–Ω"
                            admin_info += f" ({role})"
                        admin_list += admin_info + "\n"
                    await message.answer(admin_list, parse_mode="HTML")
                else:
                    error_text = await response.text()
                    await message.answer(f"[ –û—à–∏–±–∫–∞ ] {response.status}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
    except Exception as e:
        await message.answer(f"[ERROR] {e}")

